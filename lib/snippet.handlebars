
(function(win, doc){

  /**
   * Create a queue, but don't obliterate an existing one!
   */

  var analytics = win.analytics = win.analytics || [];
  var secure = 'https:' == win.location.protocol;

  /**
   * Abort if this page contains a snippet.
   * Or if the snippet was run before.
   */

  if (analytics.SNIPPET_VERSION) return;

  /**
   * Add a version to keep track of what's in the wild.
   */

  analytics.SNIPPET_VERSION = '2.0.10';

  /**
   * A list of the methods in Analytics.js to stub.
   */

  analytics.methods = [
    'trackSubmit',
    'trackClick',
    'trackLink',
    'trackForm',
    'pageview',
    'identify',
    'track',
    'group',
    'alias',
    'ready',
    'page',
    'once',
    'off',
    'on'
  ];

  /**
   * Define a factory to create stubs. These are placeholders
   * for methods in Analytics.js so that you never have to wait
   * for it to load to actually record data. The `method` is
   * stored as the first argument, so we can replay the data.
   */

  analytics.factory = function(name){
    return function(){
      var args = [].slice.call(arguments);
      analytics.push([name].concat(args));
      return analytics;
    };
  };

  /**
   * For each of our methods, generate a queueing stub.
   */

  for (var i = 0, m; m = analytics.methods[i++];) {
    analytics[m] = analytics.factory(m);
  }

  /**
   * Define a method to load Analytics.js from our CDN,
   * and that will be sure to only ever load it once.
   */

  analytics.load = function(key){
    var script = doc.createElement('script');
    var scripts = doc.getElementsByTagName('script');
    script.type = 'text/javascript';
    script.async = true;
    script.src = (secure ? 'https://' : 'http://')
      + '{{{ host }}}/analytics.js/v1/'
      + key + '/analytics.min.js';
    scripts[0].parentNode.insertBefore(script);
  };

  /**
   * Load Analytics.js with your key, which will automatically
   * load the tools you've enabled for your account. Boosh!
   */

  analytics.load('{{{ apiKey }}}');

  /**
   * Make the first page call to load the integrations. If
   * you'd like to manually name or tag the page, edit or
   * move this call however you'd like.
   */

  {{{ page }}}

})(window, document);
