
(function(win, doc){

  /**
   * Define analytics queue if it doesn't exist.
   */

  var analytics = win.analytics = win.analytics || [];
  var secure = 'https:' == win.location.protocol;

  /**
   * Abort if this page contains a snippet.
   * Or if the snippet was run before.
   */

  if (analytics.SNIPPET_VERSION) return;

  /**
   * Version.
   */

  analytics.SNIPPET_VERSION = '3.0.0';

  /**
   * A list of our methods.
   */

  analytics.methods = [
    'trackSubmit',
    'trackClick',
    'trackLink',
    'trackForm',
    'pageview',
    'identify',
    'track',
    'group',
    'alias',
    'ready',
    'page',
    'once',
    'off',
    'on'
  ];

  /**
   * Create a queue for method `name`.
   * 
   * @param {String} name
   * @return {Function}
   */

  function queue(name){
    return function(){
      var args = [].slice.call(arguments);
      analytics.push([name].concat(args));
      return analytics;
    };
  }

  /**
   * Create the methods.
   */

  for (var i = 0, m; m = analytics.methods[i++];) {
    analytics[m] = queue(m);
  }

  /**
   * Load.
   */

  analytics.load = function(key){
    var script = doc.createElement('script');
    var scripts = doc.getElementsByTagName('script');
    script.type = 'text/javascript';
    script.async = true;
    script.src = (secure ? 'https://' : 'http://')
      + '{{{ host }}}/analytics.js/v1/'
      + key + '/analytics.min.js';
    scripts[0].parentNode.insertBefore(script);
  };

  /**
   * Load `key`.
   */

  analytics.load('{{{ apiKey }}}');

  /**
   * Placeholder for our page call.
   */

  {{{ page }}}

})(window, document);
